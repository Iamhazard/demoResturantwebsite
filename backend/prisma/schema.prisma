// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String     @id @default(cuid())
  name           String?
  email          String     @unique
  emailVerified  DateTime?
  lastName       String
  hashedPassword String?
  role           Role       @default(USER)
  accounts       Account[]
  sessions       Session[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  Profile        Profile[]
  category       Category[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  image     String?
  address   String
  city      String
  country   String
  zipCode   String
  role      Role     @default(USER)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id        String      @id @default(cuid())
  userId    String
  category  String
  createdAt DateTime    @default(now())
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  updatedAt DateTime    @updatedAt
  mentItems MenuItems[]
}

model MenuItems {
  id                    String       @id @default(cuid())
  itemName              String
  Description           String
  categoryId            String
  category              Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  image                 String
  extraIngredientPrices ExtraPrice[] @relation("MenuItemExtraIngredients")
  sizes                 ExtraPrice[] @relation("MenuItemSizes")
  basePrice             String
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
}

model ExtraPrice {
  id          String     @id @default(cuid())
  name        String
  price       Float
  menuItemId  String?
  menuItems   MenuItems? @relation("MenuItemSizes", fields: [menuItemId], references: [id])
  menuItem2   MenuItems? @relation("MenuItemExtraIngredients", fields: [menuItemId2], references: [id])
  menuItemId2 String?
}
